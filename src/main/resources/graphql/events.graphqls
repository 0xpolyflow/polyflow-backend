scalar Long
scalar BigInteger
scalar BigDecimal
scalar UUID
scalar DateTime
scalar Duration

type StringEventCount {
    value: String!
    count: Int!
}

type ScreenStateEventCount {
    value: ScreenState!
    count: Int!
}

type LongEventCount {
    value: Long!
    count: Int!
}

type BigIntegerEventCount {
    value: BigInteger!
    count: Int!
}

## ScreenState
type ScreenState {
    w: Int!
    h: Int!
}

input ScreenStateInput {
    w: Int!
    h: Int!
}

input ScreenStateFilter {
    w: Int
    h: Int
}

## DeviceState
type DeviceState {
    os: String
    browser: String
    country: String
    screen: ScreenState
    walletProvider: String!
    walletType: String!
}

input DeviceStateInput {
    os: String
    browser: String
    country: String
    screen: ScreenStateInput
    walletProvider: String!
    walletType: String!
}

input DeviceStateFilter {
    os: String
    browser: String
    country: String
    screen: ScreenStateFilter
    walletProvider: String
    walletType: String
}

enum DeviceStateField {
    OS,
    BROWSER,
    COUNTRY,
    SCREEN,
    WALLET_PROVIDER,
    WALLET_TYPE
}

type DeviceStateUniqueValues {
    os: [String!]
    browser: [String!]
    country: [String!]
    screen: [ScreenState!]
    walletProvider: [String!]
    walletType: [String!]
}

type DeviceStateEventCounts {
    os: [StringEventCount!]
    browser: [StringEventCount!]
    country: [StringEventCount!]
    screen: [ScreenStateEventCount!]
    walletProvider: [StringEventCount!]
    walletType: [StringEventCount!]
}

## EventTrackerModel
type EventTrackerModel {
    eventTracker: String!
    userId: String!
    sessionId: String!
    utmSource: String
    utmMedium: String
    utmCampaign: String
    utmContent: String
    utmTerm: String
    origin: String
    path: String
    query: String
}

input EventTrackerModelInput {
    eventTracker: String!
    userId: String!
    sessionId: String!
    utmSource: String
    utmMedium: String
    utmCampaign: String
    utmContent: String
    utmTerm: String
    origin: String
    path: String
    query: String
}

input EventTrackerModelFilter {
    eventTracker: String
    userId: String
    sessionId: String
    utmSource: String
    utmMedium: String
    utmCampaign: String
    utmContent: String
    utmTerm: String
    origin: String
    path: String
    query: String
}

enum EventTrackerModelField {
    EVENT_TRACKER,
    SESSION_ID,
    UTM_SOURCE,
    UTM_MEDIUM,
    UTM_CAMPAIGN,
    UTM_CONTENT,
    UTM_TERM,
    ORIGIN,
    PATH,
    QUERY
}

type EventTrackerModelUniqueValues {
    eventTracker: [String!]
    sessionId: [String!]
    utmSource: [String!]
    utmMedium: [String!]
    utmCampaign: [String!]
    utmContent: [String!]
    utmTerm: [String!]
    origin: [String!]
    path: [String!]
    query: [String!]
}

type EventTrackerModelEventCounts {
    eventTracker: [StringEventCount!]
    sessionId: [StringEventCount!]
    utmSource: [StringEventCount!]
    utmMedium: [StringEventCount!]
    utmCampaign: [StringEventCount!]
    utmContent: [StringEventCount!]
    utmTerm: [StringEventCount!]
    origin: [StringEventCount!]
    path: [StringEventCount!]
    query: [StringEventCount!]
}

## NetworkState
type NetworkState {
    chainId: Long!
    gasPrice: BigInteger!
    blockHeight: BigInteger!
}

input NetworkStateInput {
    chainId: Long!
    gasPrice: BigInteger!
    blockHeight: BigInteger!
}

input NetworkStateFilter {
    chainId: Long
    gasPrice: BigInteger
    blockHeight: BigInteger
}

enum NetworkStateField {
    CHAIN_ID,
    GAS_PRICE,
    BLOCK_HEIGHT
}

type NetworkStateEventCounts {
    chainId: [LongEventCount!]
    gasPrice: [BigIntegerEventCount!]
    blockHeight: [BigIntegerEventCount!]
}

## TxData
enum TxStatus {
    PENDING,
    SUCCESS,
    FAILURE
}

type TxData {
    from: String!
    to: String
    value: BigInteger
    input: String
    nonce: BigInteger!
    gas: BigInteger!
    gasPrice: BigInteger!
    maxFeePerGas: BigInteger
    maxPriorityFeePerGas: BigInteger
    v: String
    r: String
    s: String
    hash: String
    status: TxStatus!
}

input TxDataInput {
    from: String!
    to: String
    value: BigInteger
    input: String
    nonce: BigInteger!
    gas: BigInteger!
    gasPrice: BigInteger!
    maxFeePerGas: BigInteger
    maxPriorityFeePerGas: BigInteger
    v: String
    r: String
    s: String
    hash: String
    status: TxStatus!
}

## WalletState
type WalletState {
    walletAddress: String!
    gasBalance: BigInteger!
    nonce: BigInteger!
    networkId: Long!
}

input WalletStateInput {
    walletAddress: String!
    gasBalance: BigInteger!
    nonce: BigInteger!
    networkId: Long!
}

input WalletStateFilter {
    walletAddress: String
    gasBalance: BigInteger
    nonce: BigInteger
    networkId: Long
}

## WalletConnectedEvent
type WalletConnectedEvent {
    id: ID!
    projectId: UUID!
    createdAt: DateTime!
    tracker: EventTrackerModel!
    wallet: WalletState!
    device: DeviceState!
    network: NetworkState!
}

input WalletConnectedEventInput {
    tracker: EventTrackerModelInput!
    wallet: WalletStateInput!
    device: DeviceStateInput!
    network: NetworkStateInput!
}

## UserLandedEvent
type UserLandedEvent {
    id: ID!
    projectId: UUID!
    createdAt: DateTime!
    tracker: EventTrackerModel!
    wallet: WalletState
    device: DeviceState!
    network: NetworkState
}

input UserLandedEventInput {
    tracker: EventTrackerModelInput!
    wallet: WalletStateInput
    device: DeviceStateInput!
    network: NetworkStateInput
}

## TxRequestEvent
type TxRequestEvent {
    id: ID!
    projectId: UUID!
    createdAt: DateTime!
    tracker: EventTrackerModel!
    wallet: WalletState!
    device: DeviceState!
    network: NetworkState!
    tx: TxData!
}

input TxRequestEventInput {
    tracker: EventTrackerModelInput!
    wallet: WalletStateInput!
    device: DeviceStateInput!
    network: NetworkStateInput!
    tx: TxDataInput!
}

## ErrorEvent
type ErrorEvent {
    id: ID!
    projectId: UUID!
    createdAt: DateTime!
    tracker: EventTrackerModel!
    errors: [String!]!
    wallet: WalletState
    device: DeviceState!
    network: NetworkState
}

input ErrorEventInput {
    tracker: EventTrackerModelInput!
    errors: [String!]!
    wallet: WalletStateInput
    device: DeviceStateInput!
    network: NetworkStateInput
}

## BlockchainErrorEvent
type BlockchainErrorEvent {
    id: ID!
    projectId: UUID!
    createdAt: DateTime!
    tracker: EventTrackerModel!
    errors: [String!]!
    wallet: WalletState!
    device: DeviceState!
    network: NetworkState!
    tx: TxData!
}

input BlockchainErrorEventInput {
    tracker: EventTrackerModelInput!
    errors: [String!]!
    wallet: WalletStateInput!
    device: DeviceStateInput!
    network: NetworkStateInput!
    tx: TxDataInput!
}

## All event types
union Event = WalletConnectedEvent | TxRequestEvent | ErrorEvent | BlockchainErrorEvent | UserLandedEvent

type IntTimespanValues {
    from: DateTime!
    to: DateTime!
    value: Int!
}

type AverageTimespanValues {
    from: DateTime!
    to: DateTime!
    averageValue: Float!
}

type MovingAverageTimespanValues {
    movingAverages: [AverageTimespanValues!]!
    averageValue: Float!
}

type IntTimespanWithAverage {
    values: [IntTimespanValues!]!
    averageValue: Float
}

type WalletConnectionsAndTransactionsInfo {
    name: String!
    totalWalletConnections: Int!
    uniqueWalletConnections: Int!
    executedTransactions: Int!
}

type WalletConnectionsAndTransactionsInfoForNetwork {
    chainId: Long!
    totalWalletConnections: Int!
    uniqueWalletConnections: Int!
    executedTransactions: Int!
}

type SessionEventsInfo {
    sessionId: String!
    totalEventCount: Int!
    totalErrorEventCount: Int!
    walletAddresses: [String!]!
    hasConnectedWallet: Boolean!
    hasExecutedTransaction: Boolean!
    devices: [DeviceState!]!
    firstEventDateTime: DateTime!
}

type UserEventsInfo {
    userId: String!
    sessionIds: [String!]!
    totalEventCount: Int!
    totalErrorEventCount: Int!
    walletAddresses: [String!]!
    hasConnectedWallet: Boolean!
    hasExecutedTransaction: Boolean!
    devices: [DeviceState!]!
    firstEventDateTime: DateTime!
}

type ProjectUserStats {
    totalUsers: Int!
    usersWithWallet: Int!
    usersWithConnectedWallet: Int!
    usersWithExecutedTx: Int!
    usersWithMultipleExecutedTx: Int!
}

type UsersWalletsAndTransactionsInfo {
    name: String!
    totalUsers: Int!
    usersWithWallet: Int!
    usersWithConnectedWallet: Int!
    totalWalletConnections: Int!
    uniqueWalletConnections: Int!
    executedTransactions: Int!
    usersWithExecutedTx: Int!
}

input Aliases {
    walletAddress: String
    userId: String
    sessionId: String
}

input EventFilter {
    tracker: EventTrackerModelFilter
    wallet: WalletStateFilter
    device: DeviceStateFilter
    network: NetworkStateFilter
    aliases: Aliases
}

type UniqueValues {
    tracker: EventTrackerModelUniqueValues!
    device: DeviceStateUniqueValues!
}

type EventCounts {
    tracker: EventTrackerModelEventCounts!
    device: DeviceStateEventCounts!
    network: NetworkStateEventCounts!
}

input Pagination {
    limit: Int! = 30
    offset: Int! = 0
}

## Wallet Portfolio

type AssetBalanceAndValueResponse {
    name: String!
    chainId: Long!
    amount: BigInteger!
    value: BigDecimal!
}

type FungibleTokenBalanceAndValueResponse {
    name: String!
    tokenAddress: String!
    chainId: Long!
    amount: BigInteger!
    value: BigDecimal!
}

type NftTokenBalanceAndValueResponse {
    name: String!
    tokenAddress: String!
    chainId: Long!
    ownsAsset: Boolean!
    amountOfOwnedAssets: BigInteger!
    totalValue: BigDecimal!
}

type AssetRpcCallResponse {
    tokenAddress: String!
    chainId: Long!
    isNft: Boolean!
}

type WalletPortfolioResponse {
    walletAddress: String!
    nativeAssetBalances: [AssetBalanceAndValueResponse!]!
    fungibleTokenBalances: [FungibleTokenBalanceAndValueResponse!]!
    nftTokenBalances: [NftTokenBalanceAndValueResponse!]!
    failedRpcCalls: [AssetRpcCallResponse!]!
    totalValue: BigDecimal!
    updatedAt: DateTime!
}

type Query {
    findEventById(id: UUID!): Event!

    findEvents(from: DateTime, to: DateTime, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [Event!]!

    findUniqueValues(
        eventTrackerFields: [EventTrackerModelField!]!,
        deviceStateFields: [DeviceStateField!]!,
        projectId: UUID!,
        from: DateTime,
        to: DateTime,
        filter: EventFilter,
        pagination: Pagination! = {}
    ): UniqueValues!

    findEventCounts(
        eventTrackerFields: [EventTrackerModelField!]!,
        deviceStateFields: [DeviceStateField!]!,
        networkStateFields: [NetworkStateField!]!,
        projectId: UUID!,
        from: DateTime,
        to: DateTime,
        filter: EventFilter,
        pagination: Pagination! = {}
    ): EventCounts!

    #    - All queries should be fetchable with a time range: e.g.
    #    - from (unix timestamp)
    #    - to (unix timestamp)
    #    If time range is ommited - it will query the entire dataset
    #
    #    All queries can be fetched as a single result or as an array (for making line graphs and charts). If fetched as a chart, another query is needed:
    #    - granularity - how granular the returned data should be (e.g. 1 'days' or 30 'minutes')
    #
    #    Queries
    #    - total connected unique wallets
    #    - total new wallets (wallets that have connected in the specified time range, that haven't connected at any time before)
    #    - daily active wallets in time range (average daily active wallets for all days in range)
    #    - active wallet is one which has connected at least once
    #    - total transactions in date range
    #    - total successful transactions (actually singed & mined)
    #    - total cancelled transactions (created tx, never signed)
    #    - average transactions per user per day
    #    - average transactions per day
    #    - max transactions per day
    #    - min transactions per day
    #    - wallet providers (connected wallets)
    #       - list of wallet providers with the number of wallet connections
    #    - wallet providers (executed transactions)
    #       - list of wallet providers with the number of transactions
    #    - unique wallet provider list (connected wallets)
    #       - list of wallet providers with the number of wallet connections from unique wallets
    #    - wallet connections by country
    #    - wallet connections by country (unique wallets)
    #    - executed transactions by country
    #    - executed transactions by country (unique wallets)
    #    - transaction browsers
    #    - transaction browsers (unique wallets)

    totalConnectedWallets(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [IntTimespanValues!]!

    totalNewWallets(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [IntTimespanValues!]!

    periodActiveWallets(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): IntTimespanWithAverage!

    totalTransactions(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [IntTimespanValues!]!

    totalSuccessfulTransactions(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [IntTimespanValues!]!

    totalCancelledTransactions(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [IntTimespanValues!]!

    averageTransactionsPerUser(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [AverageTimespanValues!]!

    averageTransactions(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): MovingAverageTimespanValues!

    minTransactionsInPeriod(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter): Int!

    maxTransactionsInPeriod(from: DateTime, to: DateTime, granularity: Duration, projectId: UUID!, filter: EventFilter): Int!

    listWalletProviders(projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [WalletConnectionsAndTransactionsInfo!]!

    listCountries(projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [WalletConnectionsAndTransactionsInfo!]!

    listNetworks(projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [WalletConnectionsAndTransactionsInfoForNetwork!]!

    listBrowsers(projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [WalletConnectionsAndTransactionsInfo!]!

    listSessions(projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [SessionEventsInfo!]!

    listUsers(projectId: UUID!, filter: EventFilter, pagination: Pagination! = {}): [UserEventsInfo!]!

    projectUserStats(projectId: UUID!, filter: EventFilter): ProjectUserStats!

    getUserWalletAndTransactionStats(field: EventTrackerModelField!, projectId: UUID!, from: DateTime, to: DateTime, filter: EventFilter, pagination: Pagination! = {}): [UsersWalletsAndTransactionsInfo!]!

    getPortfolio(walletAddress: String!): WalletPortfolioResponse
}

type Mutation {
    createWalletConnectedEvent(event: WalletConnectedEventInput!): WalletConnectedEvent!
    createTxRequestEvent(event: TxRequestEventInput!): TxRequestEvent!
    createErrorEvent(event: ErrorEventInput!): ErrorEvent!
    createBlockchainErrorEvent(event: BlockchainErrorEventInput!): BlockchainErrorEvent!
    createUserLandedEvent(event: UserLandedEventInput!): UserLandedEvent!

    updateTxRequestEventTxStatus(id: UUID!, newStatus: TxStatus!): TxRequestEvent!
    updateBlockchainErrorEventTxStatus(id: UUID!, newStatus: TxStatus!): BlockchainErrorEvent!

    refreshPortfolio(walletAddress: String!): String!
}
